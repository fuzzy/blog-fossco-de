#+AUTHOR: Mike 'Fuzzy' Partin
#+OPTIONS: toc:2

* Building a self-contained and portable home directory

** Synopsis

I have a *LOT* of machines in my home network. Some are your standard off-the-shelf PC types,
x86_64(amd64) stuff mainly, although I do have 2 i686 machines (eeePCs displaying monitoring
stats). I also have a [[https://uproxx.files.wordpress.com/2014/08/what-is-a-plethora.gif?w=650][plethora]] of ARM machines, both 32 and 64 bit (armv6/7 and aarch64[arm64]
respectively). I currently use a RockPro64 as my main desktop machine, but it fluctuates based on
stuff like, "what arm board am I playing with atm?" "is it a day that ends in 'y'?" "do I have
anything better to do?". You know, normal stuff. Anyhow, it's obvious that I'm only able to do this
and still get things done, one of two ways: 1) I get really good at or automate my local environment
setup (install anything I might need, check out my normal repos, setup configurations etc). or 2) I
have a portable setup that I can cart around either via some mechanism like NFS (or any shared
network filesystem) or an external drive.

** Goals

1. Create an external drive that contains the home directory setup
2. Ensure tools are installed in a os/arch agnostic manner
3. Ensure a consistent toolset across all os/arch combinations
4. Provide a backup and recovery mechanism

** Tools

1. POSIX sh (we'll be writing all of our automation to the lowest common denominator)
2. Git (gonna be needing this thing)
3. C/C++ Compiler toolchain and dev tools
4. rdiff-backup for incrimental backups
5. pxz or pbzip2 for compression of daily snapshots

** Getting started

First let's decide on a naming convention, and then let's take a look at designing the directory
structure. For my purposes I'm using the THWAP naming convention, as it's my general one. I'm not
going to go into the meaning behind that at this point, so don't ask. Suffice it to say, you can use
whatever convention you like. Now, as for the directory structure, I'm thining something along the
lines of the following:

#+BEGIN_EXAMPLE
- ~/.thwap
  - init.d
  - etc.d
  - scripts.d
  - pkg.d
  - library
      - OS_NAME (Ex: Linux)
        - ARCH_NAME (Ex: aarch64)
#+END_EXAMPLE

*** Initialization

The first file we need to create would be our initialization, so we'll call that thwap.sh, and since
we already have an init.d directory, it seems we're well prepared for it. We'll use a naming
convention of *NNN-NAME.sh* for all of our other initialization files.

Taking a moment to go over our initialization file, we'll notice that we

#+BEGIN_SRC sh
# Record the platform name
THWAP_OS=$(uname -s)
# and the architecture
THWAP_ARCH=$(uname -m)
# Set the base
THWAP_BASE=${HOME}/.thwap
# Our temp directory
THWAP_TEMP=${THWAP_HOME}/temp
# The home for our build scripts
THWAP_PKGD=${THWAP_BASE}/pkg.d
# Our configuration directory
THWAP_CONF=${THWAP_BASE}/etc.d
# And finally our install roots
THWAP_LIBR=${THWAP_BASE}/library
THWAP_HOME=${THWAP_LIBR}/${THWAP_OS}/${THWAP_ARCH}

# Quickly ensure all of our directories are present
for i in ${THWAP_BASE} ${THWAP_HOME} ${THWAP_LIBR} \
                       ${THWAP_TEMP} ${THWAP_PKGD}; do
    test ! -d ${i} && mkdir -p ${i}
done

# A quick utility function to add a directory to the $PATH environment
# variable if it is not already present
add2path() {
    if test -d ${1} && test -z "$(echo ${PATH}|grep ${1})"; then
        export PATH=${1}:${PATH}
    fi
}

# Before we start up with packages, let's ensure all of our initialization is finished
for itm in ${THWAP_BASE}/init.d/???-*.sh; do
    test -f ${itm} && . ${itm}
done

# Now we can ensure all of our packages are installed the way we want
for itm in ${THWAP_BASE}/pkg.d/*.sh; do
    test -f ${itm} && . ${itm}
done
#+END_SRC

Now any additions we want to make can go into seperate scripts in ~/.thwap/init.d. We can start with
our backup scripts. We'll put that in ~/.thwap/init.d/001-backup.sh. Before we head down that road
however let's have a few quick notes about the setup.

*** Backup and Restore

Firstly, we create a /backup directory. In my case this is an NFS mount to our secondary NAS. The
backups are stored on a RAIDZ (RAID5) ZFS array, on a FreeBSD 12-STABLE amd64 machine. Inside
/backup I have a directory named for my ${USER}, with the permissions set to 0700. So in my case the
directory looks like this

#+BEGIN_SRC
$ ls -l /backup
total 0
drwx------ 4 fuzzy fuzzy 32 Mar  3 01:14 fuzzy
#+END_SRC

If you don't setup a /backup directory, you'll need to modify the stuff we outline below to suit
your particular needs. We'll put this particular bit into ~/.thwap/init.d/001-backup.sh:

#+BEGIN_SRC sh
alias thwap_rdiff_backup="${HOME}/.thwap/scripts.d/thwap-rdiff-backup.sh"
alias thwap_snap_backup="${HOME}/.thwap/scripts.d/thwap-snap-backup.sh"

thwap_backup() {
    thwap_rdiff_backup
    thwap_snap_backup
}
#+END_SRC

Now that's all well and good, but if you don't have the referenced scripts, it doesn't help much. So
let's go ahead and get those put in place. We'll start with thwap-rdiff-backup.sh, which we'll put
at the totally unpredictable location: ~/.thwap/scripts.d/thwap-rdiff-backup.sh

**** Incrimental backups

Let's start by defining our tunable knobs, I put mine in ~/.thwap/etc.d, so here's
~/.thwap/etc.d/thwap-rdiff-backup.sh:

#+BEGIN_SRC sh
# backup directory, remember, a single user can be on many hosts
# so let's keep things separated nicely.
THWAP_RDIFF_DIR=/backup/${USER}/rdiff/$(hostname -s)

# And setup our rdiff-backup args
THWAP_RDIFF_ARGS="--verify -b"

# Finally our retention period.
# As a note this, should be readable by rdiff-backup as it will
# be applied directly to the -r option. I've set it to 14 days.
THWAP_RDIFF_RETENTION="14D"
#+END_SRC

And then we can put our afore-mentioned script at ~/.thwap/scripts.d/thwap-rdiff-backup.sh:

#+BEGIN_SRC sh
#!/bin/sh

THWAP_BASE_CFG=${HOME}/.thwap/init.d/thwap.sh
test -f ${THWAP_BASE_CFG} && . ${THWAP_BASE_CFG} || (echo "No ${THWAP_BASE_CONFIG}";exit 1)

CONFIG=${THWAP_CONF}/thwap-rdiff-backup.sh
if test -f ${CONFIG}; then
    . ${CONFIG}
    rdiff-backup ${THWAP_RDIFF_ARGS} ${HOME}/ ${THWAP_RDIFF_DIR}/
    rdiff-backup --remove-older-than ${THWAP_RDIFF_RETENTION} ${THWAP_RDIFF_DIR}
else
    echo "No configuration found at: ${CONFIG}"
fi
#+END_SRC

And finally, we make sure it's executable.

#+BEGIN_EXAMPLE
$ chmod +x ~/.thwap/scripts.d/thwap-rdiff-backup.sh
#+END_EXAMPLE

**** Daily snapshots

We'll setup our snapshot backup facility in the same fashion, first by putting our configuration
files into place: ~/.thwap/etc.d/thwap-snap-backup.sh:

#+BEGIN_SRC sh
# Thwap backup configuration, start with the base dir
THWAP_BKUP=/backup/${USER}

# and our tar snapshot stuff
THWAP_SNAPS=${THWAP_BKUP}/snaps
THWAP_SNAPS_ARGS="-f- -c ${HOME}/"
THWAP_SNAPS_COMP="pxz -e -9"
THWAP_SNAPS_EXT="txz"
THWAP_SNAPS_HISTORY=5
THWAP_SNAPS_CURRENT="$(hostname -s)--${USER}--$(date +%s).${THWAP_SNAPS_EXT}"
#+END_SRC

And we can follow that up with thwap-snap-backup.sh which we'll put at:
~/.thwap/scripts.d/thwap-snap-backup.sh 

#+BEGIN_SRC sh
#!/bin/sh

THWAP_BASE_CFG=${HOME}/.thwap/init.d/thwap.sh
test -f ${THWAP_BASE_CFG} && . ${THWAP_BASE_CFG} || (echo "No ${THWAP_BASE_CONFIG}";exit 1)

CONFIG=${THWAP_CONF}/thwap-snap-backup.sh
if test -f ${CONFIG}; then
    . ${CONFIG}
    OUTPUT=${THWAP_SNAPS}/${THWAP_SNAPS_CURRENT}
    tar ${THWAP_SNAPS_ARGS} 2>/dev/null | ${THWAP_SNAPS_COMP} >${OUTPUT}
    current_snaps=$(ls ${THWAP_SNAPS}|sort|wc -l)
    del_num=$((${current_snaps} - ${THWAP_SNAPS_HISTORY}))
    if test ${current_snaps} -gt ${THWAP_SNAPS_HISTORY}; then
        cdir=$(pwd)
        cd ${THWAP_SNAPS};ls $(hostname -s)*|sort|head -n ${del_num}|xargs rm -f
        cd ${cdir}
    fi
else
    echo "No configuration found at: ${CONFIG}"
fi
#+END_SRC

And similarly making sure it is executable.

#+BEGIN_EXAMPLE
$ chmod +x ~/.thwap/scripts.d/thwap-snap-backup.sh
#+END_EXAMPLE

*** Local installations

I prefer to lock the versions of language runtimes that I develop against, and I've found the
easiest way to do that, at least in my opinion, is to manage local installations in my home
directory. Specifically Go, Python, and because of my custom requirements I like to install Emacs
locally as well, to ensure that I've got a consistent setup/versions across all of my machines. We
started this setup earlier in our ~/.thwap/init.d/thwap.sh file, at the very end where we look for
and source in files in ~/.thwap/pkg.d/. So starting there let's get Golang setup.

**** Golang

#+BEGIN_SRC sh
vers=1.10.8
tball=go${vers}.src.tar.gz
url=https://dl.google.com/go/${tball}

case "$(uname -s)" in
    (FreeBSD)
        GOROOT_BOOTSTRAP=/usr/local/go
        ;;
    (Linux)
        GOROOT_BOOTSTRAP=/usr/lib/go
        ;;
esac

if test ! -x ${THWAP_HOME}/golang/root/bin/go; then
    echo "Fetching ${vers} from ${url}"
    cd ${THWAP_TEMP} ; wget ${url}
    test ! -d ${THWAP_HOME}/golang/path && mkdir -p ${THWAP_HOME}/golang/path
    tar -zxf ${tball} && sleep 2 && mv -v ${THWAP_TEMP}/go ${THWAP_HOME}/golang/${vers}
    cd ${THWAP_HOME}/golang && ln -sf ${THWAP_HOME}/golang/${vers} root
    if test -x /usr/bin/go; then
        cd ${THWAP_HOME}/golang/root/src && env GOROOT_BOOTSTRAP=${GOROOT_BOOTSTRAP} ./make.bash
    fi
    cd
    rm -f ${THWAP_TEMP}/${tball}
fi

export GOROOT=${THWAP_HOME}/golang/root
export GOPATH=${THWAP_HOME}/golang/path

add2path ${GOROOT}/bin
add2path ${GOPATH}/bin

# These tools are used by the emacs configuration for Golang development
for pkg in golang.org/x/tools/cmd/... \
           github.com/rogpeppe/godef/... \
           github.com/nsf/gocode \
           golang.org/x/tools/cmd/goimports \
           golang.org/x/tools/cmd/guru \
           github.com/dougm/goflymake; do
    go get ${pkg}
done
#+END_SRC

**** Python

As well I do alot of work in Python, both in 2.X and 3.X code-bases. I keep both of them installed,
and have a chpy function to switch between branches as needed. I generally like to keep the same set
of tools installed for both branches if possible, so I've included a mechanism for that. Here is my
~/.thwap/pkg.d/20-python.sh:

#+BEGIN_SRC sh
case "$(uname -s)" in
    (FreeBSD)
        tmake=$(which gmake)
        PROC_CPU="/compat/linux/proc/cpuinfo"
        ;;
    (Linux)
        tmake=$(which make)
        PROC_CPU="/proc/cpuinfo"
        ;;
esac

build_py() {
    if test ! -x ${THWAP_HOME}/python/${pyvers}/bin/${pyexec}; then
        cd ${THWAP_TEMP}
        wget ${url}
        tar -Jxf ${tball}
        cd Python-${pyvers}
        ./configure --prefix=${THWAP_HOME}/python/${pyvers} ${build_args} && \
            ${tmake} -j$(grep rocess ${PROC_CPU}|wc -l) && \
            make install && cd ../ && rm -rf Python-${pyvers}*
        pymajor=$(echo ${pyvers}|awk -F. '{print $1}')
        ln -sf ${THWAP_HOME}/python/${pyvers} ${THWAP_HOME}/python/${pymajor}
        cd
    fi
}

chpy() {
    PYDFLT=${THWAP_HOME}/python/default
    case "${1}" in
        (2) PYTARG=${THWAP_HOME}/python/2   ;;
        (3) PYTARG=${THWAP_HOME}/python/3   ;;
        (*) PYTARG=${THWAP_HOME}/python/3   ;; # default
    esac
    rm -f ${PYDFLT}
    ln -sf ${PYTARG} ${PYDFLT}
    PYPATH=${PYDFLT}/bin
    add2path ${PYPATH}
}

# Python 3.x setup
pyexec=python3
pyvers=3.7.2
tball=Python-${pyvers}.tar.xz
url="https://www.python.org/ftp/python/${pyvers}/${tball}"
build_args="--with-ensurepip=upgrade"

build_py && chpy 3 && pip3 install --upgrade -r ${THWAP_PKGD}/py3-requirements.txt >/dev/null 2>&1

# Python 2.x setup
pyexec=python
pyvers=2.7.15
tball=Python-${pyvers}.tar.xz
url="https://www.python.org/ftp/python/${pyvers}/${tball}"
build_args="--with-ensurepip=upgrade --with-signal-module --with-fpectl --with-threads"

build_py && chpy 2 && pip install --upgrade -r ${THWAP_PKGD}/py2-requirements.txt >/dev/null 2>&1

# default to 3.x

chpy 3
#+END_SRC

Now a quick note here, unless you have packages that don't exist for say, Python 2.X, you can have a
single py2-requirements.txt and symlink it to py3-requirements.txt until such time as you need to
keep the lists seperate.

**** Emacs

I don't do any crazy build customizations to emacs, I just like to ensure that I have the same (read
latest) version on all the machines I log into. Assuming they can build it.

#+BEGIN_SRC sh
tball=$(wget -q -O- http://ftp.gnu.org/gnu/emacs/|grep -E 'emacs-[0-9]+\.[0-9]+.*tar.xz'|awk -F'href="' '{print $2}'|awk -F'">' '{print $1}'|grep -v sig|sort -Vr|head -n1)
vers=$(echo ${tball}|awk -F- '{print $2}'|awk -F'.ta' '{print $1}')
url="http://ftp.gnu.org/gnu/emacs/${tball}"

case "$(uname -s)" in
    (FreeBSD)
        tmake=$(which gmake)
        PROC_CPU="/compat/linux/proc/cpuinfo"
        ;;
    (Linux)
        tmake=$(which make)
        PROC_CPU="/proc/cpuinfo"
        ;;
esac

if test ! -x ${THWAP_HOME}/emacs-${vers}/bin/emacs-${vers}; then
    cd ${THWAP_TEMP} ; rm -rf emacs-${vers}
    test ! -f ${tball} && wget ${url}
    tar -Jxf ${tball}
    cd emacs-${vers}
    ./configure --prefix=${THWAP_HOME}/emacs-${vers} \
                --with-modules \
                --with-x-toolkit=lucid \
                --with-threads
    ${tmake} -j$(grep rocess ${PROC_CPU} | wc -l)
    ${tmake} install && cd ../ && rm -rf emacs-${vers}*
    cd
fi


add2path ${THWAP_HOME}/emacs-${vers}/bin
#+END_SRC
