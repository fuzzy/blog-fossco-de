* Syntax highlighting tests

*** eLisp

#+BEGIN_SRC lisp
(require 'elfeed)
(require 'org)
(require 'dash)
(require 's)
(require 'cl-lib)
(require 'xml)


(defgroup elfeed-org nil
  "Configure the Elfeed RSS reader with an Orgmode file"
  :group 'comm)


(defcustom rmh-elfeed-org-tree-id "elfeed"
  "The tag or ID property on the trees containing the RSS feeds."
  :group 'elfeed-org
  :type 'string)

(defcustom rmh-elfeed-org-ignore-tag "ignore"
  "The tag on the feed trees that will be ignored."
  :group 'elfeed-org
  :type 'string)

(defcustom rmh-elfeed-org-auto-ignore-invalid-feeds nil
  "Tag feeds to ignore them when a feed could not loaded."
  :group 'elfeed-org
  :type 'bool)

(defcustom rmh-elfeed-org-files (list "~/.emacs.d/elfeed.org")
  "The files where we look to find trees with the `rmh-elfeed-org-tree-id'."
  :group 'elfeed-org
  :type '(repeat (file :tag "org-mode file")))

(defvar elfeed-org-new-entry-hook nil
  "List of new-entry tagger hooks created by elfeed-org.")

(defun rmh-elfeed-org-check-configuration-file (file)
  "Make sure FILE exists."
  (when (not (file-exists-p file))
    (error "Elfeed-org cannot open %s.  Make sure it exists customize the variable \'rmh-elfeed-org-files\'"
           (abbreviate-file-name file))))
#+END_SRC

*** Python

#+BEGIN_SRC python
import abc
import sys
import stat as st

_names = sys.builtin_module_names

# Note:  more names are added to __all__ later.
__all__ = ["altsep", "curdir", "pardir", "sep", "pathsep", "linesep",
           "defpath", "name", "path", "devnull", "SEEK_SET", "SEEK_CUR",
           "SEEK_END", "fsencode", "fsdecode", "get_exec_path", "fdopen",
           "popen", "extsep"]

def _exists(name):
    return name in globals()

def _get_exports_list(module):
    try:
        return list(module.__all__)
    except AttributeError:
        return [n for n in dir(module) if n[0] != '_']

# Any new dependencies of the os module and/or changes in path separator
# requires updating importlib as well.
if 'posix' in _names:
    name = 'posix'
    linesep = '\n'
    from posix import *
    try:
        from posix import _exit
        __all__.append('_exit')
    except ImportError:
        pass
    import posixpath as path

    try:
        from posix import _have_functions
    except ImportError:
        pass

    import posix
    __all__.extend(_get_exports_list(posix))
    del posix

elif 'nt' in _names:
    name = 'nt'
    linesep = '\r\n'
    from nt import *
    try:
        from nt import _exit
        __all__.append('_exit')
    except ImportError:
        pass
    import ntpath as path

    import nt
    __all__.extend(_get_exports_list(nt))
    del nt

    try:
        from nt import _have_functions
    except ImportError:
        pass

else:
    raise ImportError('no os specific module found')

sys.modules['os.path'] = path
from os.path import (curdir, pardir, sep, pathsep, defpath, extsep, altsep,
    devnull)

del _names
#+END_SRC

*** GoLang

#+BEGIN_SRC go
package main

import (
	"fmt"
	"io/ioutil"
	"log"
	"os"

	"gopkg.in/yaml.v2"
)

type Config struct {
	Network struct {
		Interface string `yaml:"interface"`
		Port      string `yaml:"port"`
	} `yaml:"network"`
	Content struct {
		OrgDir    string `yaml:"org_dir"`
		StaticDir string `yaml:"static_dir"`
	} `yaml:"content"`
	Template struct {
		Dir  string `yaml:"dir"`
		Name string `yaml:"name"`
	} `yaml:"template"`
}

func ReadConfig() *Config {
	retv := &Config{}
	fn := fmt.Sprintf("/config/george.yml")
	if _, err := os.Stat(fn); err != nil {
		log.Fatal(err)
	}
	data, err := ioutil.ReadFile(fn)
	if err != nil {
		log.Fatal(err)
	}
	err = yaml.Unmarshal([]byte(data), retv)
	if err != nil {
		log.Fatal(err)
	}
	return retv
}
#+END_SRC

